# Quasar proper motions default par file

[General]

output_dir = ./test1
verbose = 2
plotting = 1


[Data]

Lmax = 1

N_obj = 1000000

# positions legend:
# (1) - Mock data, requires N_obj and positions_method
# (2) - Gaia dataset, type 2
# (3) - Gaia dataset, type 3
# (4) - Gaia dataset, type 2 and 3
# (5) - Darling and Truebenbach dataset
positions = 2

positions_seed = 2

# mock positions method:
# "uniform", "bunched"
positions_method = bunched

# bunch_size_polar: horizontal
bunch_size_polar = 0.0

# bunch_size_azimuthal: vertical
bunch_size_azimuthal = 0.0

# proper_motions legend:
# (1) - Mock proper motions
# (2) - Gaia dataset, type 2
# (3) - Gaia dataset, type 3
# (4) - Gaia dataset, type 2 and 3
# (5) - Darling and Truebenbach dataset
proper_motions = 2

proper_motions_seed = 2

# mock proper motions method:
# "zero", "dipole", "multipole"
proper_motions_method = dipole

# dipole: strength of dipole
dipole = 0.2

# multipole: list of standard deviations for each multipole order
multipole = [0.2]

# proper motions errors legend:
# (1) - Mock proper motion errors
# (2) - Gaia dataset, type 2
# (3) - Gaia dataset, type 3
# (4) - Gaia dataset, type 2 and 3
# (5) - Darling and Truebenbach dataset
proper_motion_errors = 1

# mock proper motion errors method:
# "flat", "adaptive"
# "adaptive": proper_motion_errors_std is multiplied by the absolute value of each proper motion
proper_motion_errors_method = adaptive

# mock proper motion errors standard deviation:
proper_motion_errors_std = 0.1

# mock proper motion errors correlations:
proper_motion_errors_corr = 0.5

# proper_motion_noise: standard deviation of the Gaussian noise to add to the proper motions
proper_motion_noise = 0.1

proper_motion_noise_seed = 3

# Vector spherical harmonics basis: "vsh" or "orthogonal"
basis = vsh


[MCMC]

# Log-likelihood method: "permissive", "quadratic"
logL_method = permissive

nthreads = 2
nlive = 1024
maxmcmc = 128
prior_bounds = 0.5


[Post_processing]

# pol: specifies what polarization correlation coefficients to use to convert the results into a limit on the amplitude
# "GR": use all l >= 1 with values as described in Mihaylov et. al.
# "B": use l = 1
pol = GR

# limit: specifies the %-limit for the bound
limit = 90
